#!/bin/bash 


HOSTOS=$(uname | tr '[:upper:]' '[:lower:]')
#EG_VERSION=0.1.0


# Some functions
die () {
 
 case $1 in
  1) echo "EasyGitian already running"
     exit 1
     ;;
  2) printf "\nInsufficient disk space in '$HOME/VirtualBox VMs' 50GB required, %s availablei\n" "$vboxspace"
     exit 2
     ;;
  3) printf "\nInsufficient disk space in EasyGitian directory 20GB required, %s availablei\n" "$egbspace"
     exit 3 
     ;;
  *) echo "unknown error"
     exit 999
     ;;
 esac
}

check_diskspace () {

 case "$1" in
   install) printf "\nChecking disk space for initial VM launch...\n\n"
            vboxspace=$(df -k "$HOME/Virtualbox VMs" |grep dev|awk '{print $4}')
            egbspace=$(df -k ./|grep dev|awk '{print $4}')
            if [ "$vboxspace" -le 50000000 ]; then
               die 2 #insufficient diskspace
            fi
            if [ "$egbspace" -le 20000000 ]; then
               die 3
            fi
          ;;
     build) printf "\nChecking disk space for your build...\n\n"
            vboxspace=$(df -k "$HOME/Virtualbox VMs" |grep dev|awk '{print $4}')
            egbspace=$(df -k ./|grep dev|awk '{print $4}')
            if [ "$vboxspace" -le 20000000 ]; then
               die 2 #insufficient diskspace
            fi
            if [ "$egbspace" -le 20000000 ]; then
               die 3
            fi
          ;;
  esac
}
 
check_self () {
 # Crude check to see if a build is running 
 # shuold be corresponding check in the VM
 if [ "${HOSTOS}" = "darwin" ] ; then
   pgrep EasyGitian || die 1
 elif [ "${HOSTOS}" = "linux" ] ; then
   pgrep EasyGitian || die 1
 fi
}

install_prereqs () {
which vagrant > /dev/null 2>&1 \
  && echo "Vagrant appears to be installed" \
  && vagrant version \
  && echo "" \
  && which VBoxManage  > /dev/null 2>&1 \
  && echo "Virtualbox appears to be installed" \
  && echo "Virtualbox Version: $(VBoxManage -v)" \
  && echo "" \
  && if [ "$(VBoxManage list extpacks |grep "Usable" | awk '{print $2}')" = "true" ] ; then
      echo "Virtualbox Extension Pack installed:"
      VBoxManage list extpacks|grep -E '(Version|Revision)'
      echo ""
      touch ./.prereq_install_complete
     fi
if [ -f ./.prereq_install_complete ] ; then 
  echo "Install already completed"
else
  echo "Attempting to help you install Vagrant & Virtualbox"
  ./"${HOSTOS}"-Base-System.sh
fi
}

first_run () {
 if [ -f .vbox-vm-initialized ] ; then
  echo "VM Initialized"
 else  
   echo "Checking Disk Space"
   check_diskspace install
   echo "Initializing VM"
   ./VBox_VM_Initialize.sh && echo "VM Initialized" 
   test -f .vbox-vm-initialized || echo "VM initialization failed" 
 fi
}

launch_vm () {
 test -f .vbox-vm-initialized || first_run
 vagrant status | grep -i running || vagrant up
}

make_env () {
 test -f .skip_config ||  ./USER_CONFIG.sh
}

make_tarball () {
  test -f .skip_osx_builds || ./Make_SDK_tarball.sh
}

run_build () {
 test -f  .prereq_install_complete || install_prereqs
 echo "Vagrant and Virtualbox installed"
 test -f ./inputs/MacOSX10.11.sdk.tar.gz || make_tarball
 echo "OSX SDK tarball checked"
 test -f ./USER_CONFIG.env || make_env
 echo "Gitian settings configuration checked"
 test -f .vbox-vm-initialized || first_run
 echo "Virtualbox VM initialized"
 check_diskspace build && printf "\nDisk Space OK\n\n"
 vagrant status | grep running || vagrant up && \
  echo "VM Started - running build" && \
  vagrant ssh -c './run-gitian-build'
}

clean_vm () {
 if [ ! -f .vbox-vm-initialized ]; then 
   echo "VM Not initialized" 
   exit 2
 fi
   
 vagrant status | grep "not created" && vm_created=no
 if [ "${vm_created}" = "no" ]; then
   echo "VM Not created" 
   exit 1
 fi

 vagrant status | grep running && vagrant halt
 vagrant snapshot list Gitian-builder_jessie |grep Gitian-Clean \
  && echo "Found snapshot for Gitian-builder_jessie" \
  && vagrant snapshot restore --no-provision Gitian-builder_jessie Gitian-Clean \
  && echo "Snapshot restored - You should have a clean VM now" \
  && touch .vbox-vm-initialized \
  && echo "Gitian-builder_jessie VM cleaned - snapshot restored" \
  && echo "Your vm should be started. You can run:" \
  && echo "" \
  && echo "./EasyGitian " \
  && echo "" \
  && echo "To begin a build" \
  && exit 0
 # or you don't have a snapshot
 echo "Looks like you may not have a good snapshot"
 echo "You may want to run:"
 echo "./EasyGitian rebuild_vm"
 
}

destroy_vm () {
 vagrant destroy && \
   rm .vbox-vm-initialized && \
   rm .vbox-vm-snapshot-clean &&
   rm .prereq_install_complete
}
rebuild_vm () {
 destroy_vm 
 first_run
}
reboot_vm () {
 echo "Rebooting Gitian-builder_jessie VM"
 vagrant reload
}

halt_vm () {
 vagrant halt
 echo "Your GitianBuilder VM should be shutdown now"
 echo "You can save it to run more builds, or clean up"
 cat USAGE.md
 exit 0
}

watch_build () {
  echo " "
  echo "Watching build logs"
  echo "NOTE: watch_build only watches a single OS build"
  echo "      at this time. Restart once each for Linux,"
  echo "      Windows, and OSX builds"
  vagrant ssh -c '/host_vagrantdir/watch_build.sh'
  exit
}

toggle_gui () {
  gui=$(grep "vb.gui" Vagrantfile|awk '{print $3}')
  if [ "$gui" = "true" ] ; then
     sed -i.guitrue 's/vb\.gui\ \=\ true/vb\.gui\ \=\ false/g' Vagrantfile 
     rm Vagrantfile.guitrue
     echo "VM will run in headless mode"
  else
     sed -i.guifalse 's/vb\.gui\ \=\ false/vb\.gui\ \=\ true/g' Vagrantfile 
     rm Vagrantfile.guifalse
     echo "VM will run with GUI - login on console as"
     echo "username: vagrant"
     echo "password: vagrant"
  fi
}


case "$1" in

install_prereqs) install_prereqs
               ;;
      first_run) first_run
               ;;
       make_env) make_env
               ;;
   make_tarball) make_tarball
               ;;
      run_build) run_build
               ;;
       clean_vm) clean_vm
               ;;
     rebuild_vm) rebuild_vm
               ;;
     destroy_vm) destroy_vm
               ;;
      reboot_vm) reboot_vm
               ;;
	halt_vm) halt_vm
	       ;;
    watch_build) watch_build
               ;;
     toggle_gui) toggle_gui
               ;;
	     "") echo "No option specified, running build"
	         run_build
	       ;;
	     *) cat USAGE.md
	         exit 1
esac
